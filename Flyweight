public interface Character {
    public void render();
}

public class CharacterA implements Character {
    private String color;
    private int x;
    private int y;
    public Circle(String color){
        this.color = color;     
    }
    public void setX(int x) {
        this.x = x;
    }
    public void setY(int y) {
        this.y = y;
    }
    public void render() {
        System.out.println("Character at position " + x + ", " + y + " with color " + color);
    }
}

public class CharacterFactory {
    private static HashMap<String, Character> characterMap = new HashMap();
    public static Character getCharacter(String color) {
        Character character = (Character)characterMap.get(color);
        if (character == null) {
            character = new CharacterA(color);
            characterMap.put(color, character);
        }
        return character;
    }
}

public class CharacterClient {
    private static final String colors[] = { "Red", "Green", "Blue", "White", "Black" };
    public static void main(String[] args) {
        for (int i = 0; i < 15; ++i) {
            Character character = (Character)CharacterFactory.getCharacter(getRandomColor());
            character.setX(getRandomX());
            character.setY(getRandomY());
            character.render();
        }
    }
    private static String getRandomColor() {
        return colors[(int)(Math.random() * colors.length)];
    }
    private static int getRandomX() {
        return (int)(Math.random() * 100);
    }
    private static int getRandomY() {
        return (int)(Math.random() * 100);
    }
}
